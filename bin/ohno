#!/usr/bin/python

import sys
import os
import traceback
import bpython

def main():
    BIN_DIR = os.path.dirname(os.path.realpath(__file__))
    ROOT_DIR = os.path.abspath(os.path.join(BIN_DIR, '..'))
    LIB_DIR = os.path.abspath(os.path.join(ROOT_DIR, 'lib'))

    # Not exactly best practice, but convenient enough..
    sys.path.extend([
        ROOT_DIR,
        os.path.join(LIB_DIR, 'loglady'),
        os.path.join(LIB_DIR, 'ansiterm'),
        os.path.join(LIB_DIR, 'queryable'),
    ])
    import ohno.ohno

    instance = ohno.ohno.Ohno(ROOT_DIR)
    try:
        instance.start_resume_game()
        instance.loop()
        # If we're done looping, it means Ohno had a successful shutdown.
    except KeyboardInterrupt:
        instance.logger.ohno('Ctrl+C. Saving game')
        instance.save() # Will call instance.shutdown()
    except Exception, e:
        instance.logger.ohno('Got an exception: type=%s str="%s"' % (type(e), e))
        # Need to shut down curses before printing traceback.
        instance.save() # Will call instance.shutdown()

        # TODO: Would be nice if the traceback could be printed while curses
        #       is active, in debug mode, so we could inspect the tiles and use
        #       the console _if we wanted_. Often times, the bug will probably
        #       be known, so we don't always need a console.
        bpython_locals = {
            'ohno': instance,
            'e': e
        }
        bpython.embed(locals_=bpython_locals)
        traceback.print_exc()

if __name__ == '__main__':
    try:
        import psyco
        psyco.full()
    except ImportError:
        pass
    main()
